[gd_scene load_steps=7 format=2]

[sub_resource type="GDScript" id=1]
script/source = "# *************************************************
# godot3-Dystopia-game by INhumanity_arts
# Released under MIT License
# *************************************************
#
# This is a auto-included singleton containing
# information used by the music codes.
# it only works with .ogg sound files
# *************************************************
extends Node
#add more controls to this script, it breaks the singleton
export (bool) var music_on 

export(String, FILE, \"*.ogg\") var music_track = \"\"

var playlist_one = {
	0:'res://music/310-world-map-loop.ogg', 
	1:'res://music/chike san afro 1.ogg',
	2:'res://music/chike san afro 2.ogg',
	3:'res://music/chike san afro 3.ogg',
	4:'res://music/chuks-dane_chuks-dane-shoot-back.ogg',
	5:'res://music/Astrolife chike san.ogg',
	6:'res://music/chuks-dane_chuks-dane-new-breed-prod-base.ogg',
	7:'res://music/a-2-3-groovy-bgm.ogg'
}
onready var Music_streamer =get_node(\"A\")  #Refrences the music player node
onready var track
#create all your music actions here as animated nodes
\"\"\"
I put in an automatic music shuffling script in here. Feel free to update it 
and map the buttons to the game's UI when finished
\"\"\"



\"\"\"
Music singleton that handles crossfading when a new song starts
and applies a low pass filter when the game is paused. Nothing too wise
\"\"\"
var music_debug =''
onready var current_track

onready var music_bus_2 = AudioServer.get_bus_index($B.bus)
onready var music_bus = AudioServer.get_bus_index($A.bus)

func _ready():
	#music_on = true
	randomize() #randomizes shuffle code seed
	shuffle()
	
	
	play(music_track)

	

#create your signals and finctions in this node

func _process(_delta):

	\"\"\"
	Music Debug
	\"\"\"
	_music_debug()
	#if music_track == '' && music_on == true:
	#	shuffle()
	#	play(music_track) #start code from here
	
	
	
	#play(music_track)
	#organize music debug code


func _music_debug():
	if music_track != null:
		var _o = str(Music_streamer.get_stream())
		
		var _p =(' Track: ' + str(music_track.get_file() ))
		var _t = (('Time:' + str (int(Music_streamer.get_playback_position()))+'/'+ str(int(Music_streamer.get_stream().get_length()))) )
		var _n =  str(get_tree().get_nodes_in_group('music_node'))
		music_debug = (_n + _t +_p + _o)

func play(stream):
	#kinda works
	#it bugs out when the music track node is added to a scene
	if stream != null or stream != '': #null error
		if current_track == \"a\":
			$B.stream = load(stream) #invalid funtion load, cannot convert arguement from nil to string
			$anims.play(\"AtoB\")
			current_track = \"b\"
			music_on = true
		else:
			$A.stream = load(stream)
			$anims.play(\"BtoA\")
			current_track = \"a\"
			music_on = true
	if stream == null or stream == '':
		push_error('Music stream is null, fix')
		print_debug('Stream:',stream)
		print_debug('Music Track',music_track)

func clear():# triggers an autodelete in music track nodes
	music_track = ''
	print('Music cleared')
	music_on = false



# Simple 'muffled music' effect on pause using a low pass filter
func _notification(what):
	if what == NOTIFICATION_PAUSED:
		AudioServer.set_bus_effect_enabled(music_bus,0,true)
		AudioServer.set_bus_volume_db(music_bus,-10)
	if what == NOTIFICATION_UNPAUSED:
		AudioServer.set_bus_effect_enabled(music_bus,0,false)
		AudioServer.set_bus_volume_db(music_bus,0)
	elif what == NOTIFICATION_PREDELETE:
		AudioServer.set_bus_volume_db(music_bus,-100)
		AudioServer.set_bus_volume_db(music_bus_2,-100)
		print ('music off')





\"\"\"
MUSIC SHUFFLE
\"\"\"
func shuffle ():
	if music_track == '':
		track = int(rand_range(-1,playlist_one.size())) #selects a random track number
		music_track = playlist_one[track]
		return music_track
	


func _on_A_finished(): #This  signals when the music has finished and autoshuffles
	randomize() #disabled for debugging
	print('music finished--music singleton') #code block works
	shuffle()
	play(music_track)
	#print (_n)
"

[sub_resource type="Animation" id=2]
tracks/0/type = "value"
tracks/0/path = NodePath("A:volume_db")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, -30.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("B:volume_db")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -30.0, 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("A:playing")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("B:playing")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Animation" id=3]
tracks/0/type = "value"
tracks/0/path = NodePath("A:volume_db")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -30.0, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("B:volume_db")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, -30.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("B:playing")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("A:playing")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Animation" id=4]
resource_name = "Change track (straight)"

[sub_resource type="Animation" id=5]
length = 0.5

[sub_resource type="Animation" id=6]
resource_name = "play"

[node name="Music" type="Node"]
pause_mode = 2
script = SubResource( 1 )

[node name="A" type="AudioStreamPlayer" parent="."]
bus = "Music"

[node name="B" type="AudioStreamPlayer" parent="."]
volume_db = -30.0
bus = "Music"

[node name="anims" type="AnimationPlayer" parent="."]
anims/AtoB = SubResource( 2 )
anims/BtoA = SubResource( 3 )
"anims/Change track (straight)" = SubResource( 4 )
anims/pause = SubResource( 5 )
anims/play = SubResource( 6 )
[connection signal="finished" from="A" to="." method="_on_A_finished"]
